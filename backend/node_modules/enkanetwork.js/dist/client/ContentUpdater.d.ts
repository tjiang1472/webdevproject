/// <reference types="node" />
import { AutoUpdaterOptions } from "../types";
import { EventEmitter } from "node:events";
/**
 * Events that the `ContentUpdater` class can emit.
 */
interface UpdaterEvents {
    /**
     * Emitted when the content update is successful.
     */
    onUpdateSuccess: () => void;
    /**
     * Emitted when the content update fails.
     * @param errorMessage - The error message.
     */
    onUpdateFail: (errorMessage: string) => void;
}
/**
 * A class for updating content.
 * @extends EventEmitter
 */
export declare class ContentUpdater extends EventEmitter {
    private options?;
    /**
     * The Request handler.
     */
    private readonly handler;
    /**
     * Creates a new `ContentUpdater` instance.
     * @param options - The options for the ContentUpdater class.
     * @param options.checkInterval - The interval set to check for updates.
     */
    constructor(options?: AutoUpdaterOptions | undefined);
    /**
     * Automatically updates the content at a given interval.
     */
    checkForUpdates(): void;
    /**
     * Adds an event listener to the `ContentUpdater` instance.
     * @param event - The event to listen for.
     * @param listener - The event listener.
     * @returns The `ContentUpdater` instance.
     */
    on<E extends keyof UpdaterEvents>(event: E, listener: UpdaterEvents[E]): this;
    /**
     * Adds an event listener that will be invoked only once to the `ContentUpdater` instance.
     * @param event - The event to listen for.
     * @param listener - The event listener.
     * @returns The `ContentUpdater` instance.
     */
    once<E extends keyof UpdaterEvents>(event: E, listener: UpdaterEvents[E]): this;
    /**
     * Emits an event on the `ContentUpdater` instance.
     * @param event - The event to emit.
     * @param args - The arguments to pass to the event listeners.
     * @returns `true` if the event had listeners, `false` otherwise.
     */
    emit<S extends keyof UpdaterEvents>(event: S, ...args: any[]): boolean;
}
export {};
