"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StarRailFinder = void 0;
const errors_1 = require("../../errors");
const structs_1 = require("../../structs");
/**
 * A class for finding and retrieving Star Rail assets by their ID and names by their hash.
 */
class StarRailFinder {
    /**
     * The default language to use when no language is specified.
     */
    language;
    /**
     * The list of valid languages that can be used.
     */
    languages = [
        "en",
        "ru",
        "vi",
        "th",
        "pt",
        "ko",
        "ja",
        "id",
        "fr",
        "es",
        "de",
        "zh-TW",
        "zh-CN",
    ];
    /**
     * Creates a new `StarRailFinder` instance.
     * @param options - The options from the AssetFinder class.
     * @param options.language - The language to get the names. If not specified, the default language will be used.
     */
    constructor(options) {
        this.language = options?.language || "en";
        if (!this.languages.includes(this.language))
            throw new errors_1.AssetFinderError("Invalid or not available language.");
    }
    /**
     * Finds and returns the Star Rail assets and name of a character with the given ID and language.
     * @param characterId - The ID of the character.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The assets and name of the Star Rail character.
     */
    character(characterId, language = this.language) {
        if (!characterId)
            throw new errors_1.AssetFinderError("You must provide a character id");
        if (isNaN(+characterId))
            throw new errors_1.AssetFinderError("The character id must be a valid integer or string");
        return new structs_1.SRCharacterAssets(characterId, language);
    }
    /**
     * Finds and returns the Star Rail assets and name of a lightcone with the given ID and language.
     * @param lightconeId - The ID of the lightcone.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The assets and name of the lightcone.
     */
    lightcone(lightconeId, language = this.language) {
        if (!lightconeId)
            throw new errors_1.AssetFinderError("You must provide a lightcone id");
        if (isNaN(+lightconeId))
            throw new errors_1.AssetFinderError("The lightcone id must be a valid integer or string");
        return new structs_1.SRLightcone(lightconeId, language);
    }
    /**
     * Finds and returns the StarRail assets of a profile picture with the given ID.
     * @param iconId - The ID of the profile picture.
     * @returns The assets of the Star Rail profile picture.
     */
    profilePicture(iconId) {
        if (!iconId)
            throw new errors_1.AssetFinderError("You must provide an icon id");
        if (isNaN(+iconId))
            throw new errors_1.AssetFinderError("The icon id must be a valid integer or string");
        return new structs_1.SRProfilePicture(iconId);
    }
    /**
     * Finds and returns the StarRail assets and name of an eidolon with the given ID and language.
     * @param eidolonId - The ID of the eidolon.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The assets and name of the eidolon.
     */
    eidolon(eidolonId, language = this.language) {
        if (!eidolonId)
            throw new errors_1.AssetFinderError("You must provide an eidolon id");
        if (isNaN(+eidolonId))
            throw new errors_1.AssetFinderError("The eidolon id must be a valid integer or string");
        return new structs_1.SREidolon(eidolonId, language);
    }
    /**
     * Finds and returns the StarRail assets and name of a relic with the given ID and language.
     * @param relicId - The ID of the relic.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The assets and name of the relic.
     */
    relic(relicId, language = this.language) {
        if (!relicId)
            throw new errors_1.AssetFinderError("You must provide a relic id");
        if (isNaN(+relicId))
            throw new errors_1.AssetFinderError("The relic id must be a valid integer or string");
        return new structs_1.SRRelic(relicId, language);
    }
    /**
     * Finds and returns the StarRail assets and name of a trace with the given ID and language.
     * @param traceId - The ID of the trace.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The assets and name of the trace.
     */
    trace(traceId, language = this.language) {
        if (!traceId)
            throw new errors_1.AssetFinderError("You must provide a trace id");
        if (isNaN(+traceId))
            throw new errors_1.AssetFinderError("The trace id must be a valid integer or string");
        return new structs_1.SRSkillTree(traceId, language);
    }
    /**
     * Finds and returns a name depending on the given Star Rail hash.
     * @param hash - The hash.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The value of the hash.
     */
    hash(hash, language = this.language) {
        if (!hash)
            throw new errors_1.AssetFinderError("You must provide a hash");
        if (isNaN(+hash))
            throw new errors_1.AssetFinderError("The hash must be a valid integer or string");
        return new structs_1.SRHash(hash, language);
    }
    /**
     * Function to convert string names (hashes) into normal (numeric) hashes.
     * @param name - The stringified hash.
     * @author secretlyrice in Discord
     * @returns The normal (numeric) hash.
     */
    getStableHash(name) {
        let hash1 = 5381 | 0;
        let hash2 = hash1 | 0;
        for (let i = 0; i < name.length; i += 2) {
            hash1 = ((hash1 << 5) + hash1) ^ name.charCodeAt(i);
            if (i == name.length - 1 || name[i + 1] == "\0")
                break;
            hash2 = ((hash2 << 5) + hash2) ^ name.charCodeAt(i + 1);
        }
        return (hash1 + Math.imul(hash2, 1566083941)) | 0;
    }
    /**
     * Converts a string to an enka Star Rail asset link.
     * @param s - The string to convert.
     * @returns The converted string as a link.
     */
    toLink(s) {
        return `https://enka.network/ui/hsr/${s}`;
    }
}
exports.StarRailFinder = StarRailFinder;
