"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StarRailClient = void 0;
const handlers_1 = require("../../handlers");
const structs_1 = require("../../structs");
const errors_1 = require("../../errors");
/**
 * A class for requesting Star Rail info to the Enka API.
 */
class StarRailClient {
    /**
     * The Request handler.
     */
    handler;
    /**
     * The default language to use when no language is specified.
     */
    language;
    /**
     * The list of valid languages that can be used.
     */
    languages = [
        "en",
        "ru",
        "vi",
        "th",
        "pt",
        "ko",
        "ja",
        "id",
        "fr",
        "es",
        "de",
        "zh-TW",
        "zh-CN",
    ];
    /**
     * Enable cache system.
     */
    caching;
    /**
     * Creates a new `StarRailClient` instance.
     * @param options - The options from the Wrapper class.
     * @param options.userAgent - The User Agent used in the request. If not specified, the default User Agent will be used.
     * @param options.language - The language to get the names. If not specified, the default language will be used.
     * @param options.cache - Specify if you want to get cached data.
     */
    constructor(options) {
        this.handler = new handlers_1.RequestHandler(options);
        this.language = options?.language || "en";
        this.caching = options?.cache;
        if (!this.languages.includes(this.language))
            throw new errors_1.AssetFinderError("Invalid or not available language.");
    }
    /**
     * Returns the data of a Star Rail player by the given UID.
     * @param uid - The UID of the player to get the data.
     * @param language - The language to get the names.
     * @returns The data of the Star Rail player.
     */
    async getPlayer(uid, language = this.language) {
        if (!uid)
            throw new errors_1.PackageError("The UID parameter is missing");
        if (!this.languages.includes(language))
            throw new errors_1.AssetFinderError("Invalid or not available language.");
        const cacheClient = this.caching == true ? new handlers_1.CacheHandler() : undefined;
        cacheClient?.setupCacheDirectory();
        const cache = cacheClient?.get(`player-sr-${uid}`);
        if (cache != undefined)
            return new structs_1.SRPlayerData(cache, language);
        const data = await this.handler.player(uid, "starrail");
        cacheClient?.set(`player-sr-${uid}`, data);
        return new structs_1.SRPlayerData(data, language);
    }
    /**
     * Returns the data of an Enka profile by the given username.
     * @param username - The username of the profile to get the data.
     * @returns The data of the profile.
     */
    async getEnkaProfile(username) {
        if (!username)
            throw new errors_1.PackageError("The Username parameter is missing");
        const data = await this.handler.profile(username);
        if (!data.username)
            return {};
        return new structs_1.EnkaProfile(data);
    }
    /**
     * Returns the data of the Star Rail hoyos of an Enka profile by the given username.
     * @param username - The username of the profile to get the data.
     * @param language - The language to get the names.
     * @returns The data of the profile Star Rail hoyos.
     */
    async getEnkaHoyos(username, language = this.language) {
        const hoyos = [];
        if (!username)
            throw new errors_1.PackageError("The Username parameter is missing");
        if (!this.languages.includes(language))
            throw new errors_1.AssetFinderError("Invalid or not available language.");
        const data = await this.handler.profile(`${username}/hoyos`);
        if (Object.keys(data).length == 0)
            return [];
        Object.keys(data).forEach((hash) => {
            if (data[hash].hoyo_type == 1) {
                hoyos.push(data[hash]);
            }
        });
        if (hoyos.length == 0)
            return [];
        return hoyos.map((data) => new structs_1.Hoyos(data, language, username));
    }
    /**
     * Returns the Star Rail builds of an Enka hoyo by the given username and profile hash.
     * @param username - The username of the profile to get the data.
     * @param hash - The hash of the Star Rail hoyo to get the builds.
     * @param language - The language to get the names.
     * @returns The Star Rail builds of the profile.
     */
    async getEnkaHoyoBuilds(username, hash, language = this.language) {
        const builds = [];
        if (!username)
            throw new errors_1.PackageError("The Username parameter is missing");
        if (!this.languages.includes(language))
            throw new errors_1.AssetFinderError("Invalid or not available language.");
        if (!hash)
            throw new errors_1.PackageError("The Hash parameter is missing");
        const data = await this.handler.profile(`${username}/hoyos/${hash}/builds`);
        if (Object.keys(data).length == 0)
            return [];
        Object.keys(data).forEach((characterId) => {
            if (data[characterId].find((build) => build.hoyo_type == 1)) {
                builds.push(...data[characterId]);
            }
        });
        if (builds.length == 0)
            return [];
        return builds.map((data) => new structs_1.HoyoBuilds(data, language));
    }
}
exports.StarRailClient = StarRailClient;
