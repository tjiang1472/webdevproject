import { AssetFinderOptions } from "../../types";
import { SRCharacterAssets, SREidolon, SRHash, SRLightcone, SRProfilePicture, SRRelic, SRSkillTree } from "../../structs";
/**
 * A class for finding and retrieving Star Rail assets by their ID and names by their hash.
 */
export declare class StarRailFinder {
    /**
     * The default language to use when no language is specified.
     */
    private language;
    /**
     * The list of valid languages that can be used.
     */
    private languages;
    /**
     * Creates a new `StarRailFinder` instance.
     * @param options - The options from the AssetFinder class.
     * @param options.language - The language to get the names. If not specified, the default language will be used.
     */
    constructor(options?: AssetFinderOptions);
    /**
     * Finds and returns the Star Rail assets and name of a character with the given ID and language.
     * @param characterId - The ID of the character.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The assets and name of the Star Rail character.
     */
    character(characterId: string | number, language?: string): SRCharacterAssets;
    /**
     * Finds and returns the Star Rail assets and name of a lightcone with the given ID and language.
     * @param lightconeId - The ID of the lightcone.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The assets and name of the lightcone.
     */
    lightcone(lightconeId: string | number, language?: string): SRLightcone;
    /**
     * Finds and returns the StarRail assets of a profile picture with the given ID.
     * @param iconId - The ID of the profile picture.
     * @returns The assets of the Star Rail profile picture.
     */
    profilePicture(iconId: string | number): SRProfilePicture;
    /**
     * Finds and returns the StarRail assets and name of an eidolon with the given ID and language.
     * @param eidolonId - The ID of the eidolon.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The assets and name of the eidolon.
     */
    eidolon(eidolonId: string | number, language?: string): SREidolon;
    /**
     * Finds and returns the StarRail assets and name of a relic with the given ID and language.
     * @param relicId - The ID of the relic.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The assets and name of the relic.
     */
    relic(relicId: string | number, language?: string): SRRelic;
    /**
     * Finds and returns the StarRail assets and name of a trace with the given ID and language.
     * @param traceId - The ID of the trace.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The assets and name of the trace.
     */
    trace(traceId: string | number, language?: string): SRSkillTree;
    /**
     * Finds and returns a name depending on the given Star Rail hash.
     * @param hash - The hash.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The value of the hash.
     */
    hash(hash: string | number, language?: string): SRHash;
    /**
     * Function to convert string names (hashes) into normal (numeric) hashes.
     * @param name - The stringified hash.
     * @author secretlyrice in Discord
     * @returns The normal (numeric) hash.
     */
    getStableHash(name: string): number;
    /**
     * Converts a string to an enka Star Rail asset link.
     * @param s - The string to convert.
     * @returns The converted string as a link.
     */
    toLink(s: string): string;
}
