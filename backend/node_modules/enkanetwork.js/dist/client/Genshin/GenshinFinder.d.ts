import { AssetFinderOptions } from "../../types";
import { CharacterAssets, ConstellationAssets, Hash, NamecardAssets, SkillAssets, WeaponAssets, CostumeAssets, ProfilePictureAssets } from "../../structs";
/**
 * A class for finding and retrieving Genshin assets by their ID and names by their hash.
 */
export declare class GenshinFinder {
    /**
     * The default language to use when no language is specified.
     */
    private language;
    /**
     * The list of valid languages that can be used.
     */
    private languages;
    /**
     * Creates a new `GenshinFinder` instance.
     * @param options - The options from the AssetFinder class.
     * @param options.language - The language to get the names. If not specified, the default language will be used.
     */
    constructor(options?: AssetFinderOptions);
    /**
     * Finds and returns the Genshin assets and name of a character with the given ID and language.
     * @param characterId - The ID of the character.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The assets and name of the Genshin character.
     */
    character(characterId: string | number, language?: string): CharacterAssets;
    /**
     * Finds and returns the Genshin assets and name of a namecard with the given ID and language.
     * @param namecardId - The ID of the namecard.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The assets and name of the namecard.
     */
    namecard(namecardId: string | number, language?: string): NamecardAssets;
    /**
     * Finds and returns the Genshin assets and name of a skill with the given ID and language.
     * @param skillId - The ID of the skill.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The assets and name of the Genshin skill.
     */
    skill(skillId: string | number, language?: string): SkillAssets;
    /**
     * Finds and returns the Genshin assets and name of a constellation with the given ID and language.
     * @param constellationId - The ID of the constellation.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The assets and name of the constellation.
     */
    constellation(constellationId: string | number, language?: string): ConstellationAssets;
    /**
     * Finds and returns the Genshin assets and name of a weapon with the given ID and language.
     * @param weaponId - The ID of the weapon.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The assets and name of the weapon.
     */
    weapon(weaponId: string | number, language?: string): WeaponAssets;
    /**
     * Finds and returns the Genshin assets of a character costume with the given ID.
     * @param costumeId - The ID of the costume.
     * @returns The assets of the costume.
     */
    costume(costumeId: string | number): CostumeAssets;
    /**
     * Finds and returns the Genshin assets of a profile picture with the given ID and language.
     * @param profilePictureId - The ID of the profile picture.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The assets of the profile picture.
     */
    profilePicture(profilePictureId: string | number, language?: string): ProfilePictureAssets;
    /**
     * Finds and returns a name depending on the given Genshin nameTextMapHash.
     * @param nameTextMapHash - The nameTextMapHash.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The value of the nameTextMapHash.
     */
    hash(nameTextMapHash: string | number, language?: string): Hash;
    /**
     * Converts a string to an enka Genshin asset link.
     * @param s - The string to convert.
     * @returns The converted string as a link.
     */
    toLink(s: string): string;
}
