"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenshinFinder = void 0;
const errors_1 = require("../../errors");
const structs_1 = require("../../structs");
/**
 * A class for finding and retrieving Genshin assets by their ID and names by their hash.
 */
class GenshinFinder {
    /**
     * The default language to use when no language is specified.
     */
    language;
    /**
     * The list of valid languages that can be used.
     */
    languages = [
        "en",
        "ru",
        "vi",
        "th",
        "pt",
        "ko",
        "ja",
        "id",
        "fr",
        "es",
        "de",
        "zh-TW",
        "zh-CN",
        "it",
        "tr",
    ];
    /**
     * Creates a new `GenshinFinder` instance.
     * @param options - The options from the AssetFinder class.
     * @param options.language - The language to get the names. If not specified, the default language will be used.
     */
    constructor(options) {
        this.language = options?.language || "en";
        if (!this.languages.includes(this.language))
            throw new errors_1.AssetFinderError("Invalid or not available language.");
    }
    /**
     * Finds and returns the Genshin assets and name of a character with the given ID and language.
     * @param characterId - The ID of the character.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The assets and name of the Genshin character.
     */
    character(characterId, language = this.language) {
        if (!characterId)
            throw new errors_1.AssetFinderError("You must provide a character id");
        if (isNaN(+characterId) && !characterId.toString().includes("-"))
            throw new errors_1.AssetFinderError("The character id must be a valid integer or string");
        return new structs_1.CharacterAssets(characterId, language);
    }
    /**
     * Finds and returns the Genshin assets and name of a namecard with the given ID and language.
     * @param namecardId - The ID of the namecard.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The assets and name of the namecard.
     */
    namecard(namecardId, language = this.language) {
        if (!namecardId)
            throw new errors_1.AssetFinderError("You must provide a namecard id");
        if (isNaN(+namecardId))
            throw new errors_1.AssetFinderError("The namecard id must be an integer or string");
        return new structs_1.NamecardAssets(namecardId, language);
    }
    /**
     * Finds and returns the Genshin assets and name of a skill with the given ID and language.
     * @param skillId - The ID of the skill.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The assets and name of the Genshin skill.
     */
    skill(skillId, language = this.language) {
        if (!skillId)
            throw new errors_1.AssetFinderError("You must provide a talent id");
        if (isNaN(+skillId))
            throw new errors_1.AssetFinderError("The talent id must be an integer or string");
        return new structs_1.SkillAssets(skillId, language);
    }
    /**
     * Finds and returns the Genshin assets and name of a constellation with the given ID and language.
     * @param constellationId - The ID of the constellation.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The assets and name of the constellation.
     */
    constellation(constellationId, language = this.language) {
        if (!constellationId)
            throw new errors_1.AssetFinderError("You must provide a constellation id");
        if (isNaN(+constellationId))
            throw new errors_1.AssetFinderError("The constellation id must be an integer or string");
        return new structs_1.ConstellationAssets(constellationId, language);
    }
    /**
     * Finds and returns the Genshin assets and name of a weapon with the given ID and language.
     * @param weaponId - The ID of the weapon.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The assets and name of the weapon.
     */
    weapon(weaponId, language = this.language) {
        if (!weaponId)
            throw new errors_1.AssetFinderError("You must provide a weapon id");
        if (isNaN(+weaponId))
            throw new errors_1.AssetFinderError("The weapon id must be an integer or string");
        return new structs_1.WeaponAssets(weaponId, language);
    }
    /**
     * Finds and returns the Genshin assets of a character costume with the given ID.
     * @param costumeId - The ID of the costume.
     * @returns The assets of the costume.
     */
    costume(costumeId) {
        if (!costumeId)
            throw new errors_1.AssetFinderError("You must provide a costume id");
        if (isNaN(+costumeId))
            throw new errors_1.AssetFinderError("The costume id must be an integer or string");
        return new structs_1.CostumeAssets(costumeId);
    }
    /**
     * Finds and returns the Genshin assets of a profile picture with the given ID and language.
     * @param profilePictureId - The ID of the profile picture.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The assets of the profile picture.
     */
    profilePicture(profilePictureId, language = this.language) {
        if (!profilePictureId)
            throw new errors_1.AssetFinderError("You must provide a profile picture id");
        if (isNaN(+profilePictureId))
            throw new errors_1.AssetFinderError("The profile picture id must be an integer or string");
        return new structs_1.ProfilePictureAssets(profilePictureId, language);
    }
    /**
     * Finds and returns a name depending on the given Genshin nameTextMapHash.
     * @param nameTextMapHash - The nameTextMapHash.
     * @param language - The language to get the name. If not specified, the default language will be used.
     * @returns The value of the nameTextMapHash.
     */
    hash(nameTextMapHash, language = this.language) {
        if (!nameTextMapHash)
            throw new errors_1.AssetFinderError("You must provide a hash");
        if (isNaN(+nameTextMapHash))
            throw new errors_1.AssetFinderError("The hash must be an integer or string");
        return new structs_1.Hash(nameTextMapHash, language);
    }
    /**
     * Converts a string to an enka Genshin asset link.
     * @param s - The string to convert.
     * @returns The converted string as a link.
     */
    toLink(s) {
        return `https://enka.network/ui/${s}.png`;
    }
}
exports.GenshinFinder = GenshinFinder;
