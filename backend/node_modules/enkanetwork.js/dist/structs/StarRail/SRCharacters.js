"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SRCharacters = void 0;
const SRLightCone_1 = require("./SRLightCone");
const SRRelics_1 = require("./SRRelics");
const SRSkillTreeList_1 = require("./SRSkillTreeList");
const client_1 = require("../../client");
const utils_1 = require("../../utils");
const handlers_1 = require("../../handlers");
const SRStats_1 = require("./SRStats");
const characters = utils_1.srcharacters;
const lightcones = utils_1.lightcones;
const types = utils_1.types;
const maxLevelMapping = [
    20,
    30,
    40,
    50,
    60,
    70,
    80
];
/**
 * A class that structures the character's data.
 */
class SRCharacters {
    /**
     * The ID of the character.
     */
    characterId;
    /**
     * The name of the character.
     */
    name;
    /**
     * The rarity of the character.
     */
    rarity;
    /**
     * The element type of the character.
     */
    element;
    /**
     * The path of the character.
     */
    path;
    /**
     * The ascension of the character.
     */
    ascension;
    /**
     * The information about the lightcone of the character.
     */
    lightcone;
    /**
     * The information about the traces of the character.
     */
    traces;
    /**
     * The position of the character.
     */
    pos;
    /**
     * The experience of the character.
     */
    exp;
    /**
     * The information about the relics of the character.
     */
    relics;
    /**
     * The level of the character.
     */
    level;
    /**
     * The maximum level by the current ascension.
     */
    maxLevel;
    /**
     * How many eidolons the character has.
     */
    eidolons;
    /**
     * Tells if the character is the support character.
     */
    _assist;
    /**
     * The information about the assets of the character.
     */
    assets;
    /**
     * Creates a new `SRCharacters` instance.
     * @param data - The data of the character.
     * @param language - The language to get the names.
     */
    constructor(data, language) {
        const character = characters[data.avatarId];
        const { starrail: finder } = new client_1.AssetFinder({
            language: language,
        });
        this.characterId = data.avatarId;
        this.name = finder.character(data.avatarId).name;
        this.rarity = character.Rarity;
        this.element = character.Element;
        this.path = types[language][character.AvatarBaseType].name;
        this.ascension = data.promotion;
        this.lightcone = data.equipment
            ? new SRLightCone_1.SRLightCone(data.equipment, language)
            : {};
        this.traces = data.skillTreeList.map((data) => new SRSkillTreeList_1.SRSkillTreeList(data, language));
        this.pos = data.pos || "";
        this.exp = data.exp || 0;
        this.relics =
            data.relicList && data.relicList.length > 0
                ? data.relicList.map((data) => new SRRelics_1.SRRelics(data))
                : [];
        this.level = data.level;
        this.maxLevel = maxLevelMapping[data.promotion || 0];
        this.eidolons = data.rank || 0;
        this._assist = data._assist || false;
        this.assets = finder.character(data.avatarId).assets;
    }
    stats() {
        const character = characters[this.characterId];
        const propState = new handlers_1.PropState();
        propState.add(handlers_1.LayerGenerator.character({ characterId: this.characterId, ascension: this.ascension, level: this.level }));
        if (this.lightcone)
            propState.add(handlers_1.LayerGenerator.weapon(this.lightcone));
        if (this.lightcone && lightcones[this.lightcone.lightConeId].AvatarBaseType == character?.AvatarBaseType)
            propState.add(handlers_1.LayerGenerator.weaponAffix(this.lightcone));
        propState.add(handlers_1.LayerGenerator.relic(this.relics));
        propState.add(handlers_1.LayerGenerator.relicSet(this.relics));
        propState.add(handlers_1.LayerGenerator.skillTree(this.traces));
        let props = propState.sum().props;
        return props.map((data) => new SRStats_1.SRStats(data));
    }
}
exports.SRCharacters = SRCharacters;
