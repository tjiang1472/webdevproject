"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SRLightCone = void 0;
const client_1 = require("../../client");
const utils_1 = require("../../utils");
const handlers_1 = require("../../handlers");
const lightcones = utils_1.lightcones;
/**
 * A class that structures the lightcone's data.
 */
class SRLightCone {
    /**
     * The ID of the lightcone.
     */
    lightConeId;
    /**
     * The name of the lightcone.
     */
    name;
    /**
     * The rarity of the lightcone.
     */
    rarity;
    /**
     * The path of the lightcone.
     */
    path;
    /**
     * The icon path of the lightcone.
     */
    icon;
    /**
     * The level of the lightcone.
     */
    level;
    /**
     * The ascension of the lightcone.
     */
    ascension;
    /**
     * The super imposition level of the lightcone.
     */
    superImposition;
    /**
     * The information about the stats of the lightcone.
     */
    stats;
    /**
     * The name hash of the lightcone.
     */
    nameHash;
    /**
     * Creates a new `SRLightCone` instance.
     * @param data - The data of the lightcone.
     * @param language - The language to get then name.
     */
    constructor(data, language) {
        const { starrail: finder } = new client_1.AssetFinder({
            language: language,
        });
        this.lightConeId = data.tid;
        this.name = finder.lightcone(data.tid).name;
        this.rarity = lightcones[data.tid].Rarity;
        this.path = finder.lightcone(data.tid).path;
        this.icon = finder.lightcone(data.tid).icon;
        this.level = data.level;
        this.ascension = data.promotion;
        this.superImposition = data.rank;
        this.stats = data._flat.props.map((data) => new SRLightConeStats(data));
        this.nameHash = data._flat.name;
    }
}
exports.SRLightCone = SRLightCone;
/**
 * A class that structures the lightcone stats.
 */
class SRLightConeStats {
    /**
     * The type of stat.
     */
    type;
    /**
     * The raw value of the stat.
     */
    value;
    constructor(data) {
        this.type = data.type;
        this.value = data.value;
    }
    /**
     * @returns The parsed value of the stat.
     */
    parsedValue() {
        return (0, handlers_1.ifProp)(this.value, this.type);
    }
}
