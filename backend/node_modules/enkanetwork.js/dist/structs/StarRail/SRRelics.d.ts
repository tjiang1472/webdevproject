import { SRRelicList, SRRelicPropsAPI, SRSubAffixListAPI } from "../../types";
/**
 * A class that structures the relic's data.
 */
export declare class SRRelics {
    /**
     * The level of the relic.
     */
    level: number;
    /**
     * The information about the substats of the relic.
     */
    substatList: SRSubAffixList[];
    /**
     * The ID of the main stat.
     */
    mainStatId: number;
    /**
     * The type of relic.
     */
    type: number;
    /**
     * The ID of the relic.
     */
    relicId: number;
    /**
     * The information about the main stat of the relic.
     */
    mainStat: SRAffixes;
    /**
     * The information about the substats stats of the relic.
     */
    substats: SRAffixes[];
    /**
     * The name hash of the relic set.
     */
    setNameHash: number;
    /**
     * The ID of the relic set.
     */
    setId: number;
    /**
     * Creates a new `SRRelics` instance.
     * @param data - The data of the relics.
     */
    constructor(data: SRRelicList);
}
/**
 * A class that structures the substats info's data.
 */
declare class SRSubAffixList {
    /**
     * The ID of the substat.
     */
    substatId: number;
    /**
     * The type of the stat.
     */
    type: string;
    /**
     * The number of rolls the substat had.
     */
    count: number;
    /**
     * The number of steps the substats had.
     */
    step: number;
    /**
     * The quality of the substat rolls.
     * - 3 - Max roll | 2 - Medium roll | 1 - Low roll
     */
    rollQuality: number[];
    /**
     * Creates a new `SRSubAffixList` instance.
     * @param data - The data of substats info.
     */
    constructor(data: SRSubAffixListAPI);
}
/**
 * A class that structures the stats's data.
 */
declare class SRAffixes {
    /**
     * The type of stat.
     */
    type: string;
    /**
     * The raw value of the stat.
     */
    value: number;
    /**
     * Creates a new `SRAffixes` instance.
     * @param data - The data of the stats.
     */
    constructor(data: SRRelicPropsAPI);
    /**
     * @returns The parsed value of the stat
     */
    pasedValue(): number | string;
}
export {};
