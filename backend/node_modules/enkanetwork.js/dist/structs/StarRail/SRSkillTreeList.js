"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SRSkillTreeList = void 0;
const client_1 = require("../../client");
const utils_1 = require("../../utils");
const handlers_1 = require("../../handlers");
const skillTree = utils_1.skilltree;
const hashes = utils_1.srhashes;
/**
 * A class that structures the skill tree's data.
 */
class SRSkillTreeList {
    /**
     * The ID of the trace.
     */
    traceId;
    /**
     * The level of the trace.
     */
    level;
    /**
     * The type of the trace.
     */
    type;
    /**
     * The position of the trace in the tree.
     */
    pos;
    /**
     * The icon path of the trace.
     */
    icon;
    /**
     * The information about the base skill of the trace.
     */
    baseSkill;
    /**
     * The information about the trace stat.
     */
    status;
    /**
     * The name of the trace.
     */
    name;
    /**
     * Creates a new `SRSkillTreeList` instance.
     * @param data - The data of the skill tree.
     * @param language - The language to get the name.
     */
    constructor(data, language) {
        const trace = skillTree[language][data.pointId];
        const { starrail: finder } = new client_1.AssetFinder({
            language: language,
        });
        this.traceId = data.pointId;
        this.level = data.level;
        this.type = +finder.trace(data.pointId).type;
        this.pos = finder.trace(data.pointId).pos;
        this.icon = finder.trace(data.pointId).icon;
        this.baseSkill = trace.baseSkill.Id
            ? new SRBaseSkill(trace.baseSkill, language)
            : {};
        this.status = trace.status.Value
            ? new SRStatus(trace.status)
            : {};
        this.name = finder.trace(data.pointId).name;
    }
}
exports.SRSkillTreeList = SRSkillTreeList;
/**
 * A class that structures the base skill's data.
 */
class SRBaseSkill {
    /**
     * The ID of the base skill.
     */
    id;
    /**
     * The name of the base skill.
     */
    name;
    /**
     * Creates a new `SRBaseSkill` instance.
     * @param data - The data of the base skill.
     * @param language - The language to get the name.
     */
    constructor(data, language) {
        this.id = data.Id;
        this.name = hashes[language][data.Name];
    }
}
/**
 * A class that structures the trace stat's data.
 */
class SRStatus {
    /**
     * The type of stat.
     */
    type;
    /**
     * The raw value of the trace.
     */
    value;
    /**
     * Creates a new `SRStatus` instance.
     * @param data - The data of the status stat.
     */
    constructor(data) {
        this.type = data.PropertyType;
        this.value = data.Value;
    }
    /**
     * @returns The parsed value of the stat.
     */
    parsedValue() {
        return (0, handlers_1.ifProp)(this.cleanup(this.value), this.type);
    }
    cleanup(v) {
        return Math.round(v * 100000000) / 100000000;
    }
}
