"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SRPlayer = void 0;
const client_1 = require("../../client");
/**
 * A class that structures the player's data.
 */
class SRPlayer {
    /**
     * The information about the profile picture of the player.
     */
    profilePicture;
    /**
     * The username of the player.
     */
    username;
    /**
     * The level of the player.
     */
    level;
    /**
     * The signature of the player.
     */
    signature;
    /**
     * The UID of the player.
     */
    uid;
    /**
     * The friend number of the player.
     */
    friendCount;
    /**
     * The information about various records of the player.
     */
    recordInfo;
    /**
     * The equilibrium level of the player.
     */
    equilibriumLevel;
    /**
     * Tells if the characters info of the player's showcase are public.
     */
    showcaseEnabled;
    /**
     * The platform of the player.
     */
    platform;
    /**
     * Creates a new `SRPlayer` instance.
     * @param data - The data of the player.
     */
    constructor(data) {
        this.profilePicture = data.headIcon ? new SRProfilePicture(data.headIcon) : {};
        this.username = data.nickname;
        this.level = data.level;
        this.signature = data.signature || "";
        this.uid = data.uid;
        this.friendCount = data.friendCount || 0;
        this.recordInfo = new SRRecordInfo(data.recordInfo);
        this.equilibriumLevel = data.worldLevel || "";
        this.showcaseEnabled = data.isDisplayAvatar;
        this.platform = data.platform || "";
    }
}
exports.SRPlayer = SRPlayer;
/**
 * A class that structures the profile pictures's data.
 */
class SRProfilePicture {
    /**
     * The id of the profile picture.
     */
    id;
    /**
     * The icon path of the profile picture.
     */
    icon;
    /**
     * Creates a new `SRPlayer` instance.
     * @param id - The id of the profile picture.
     */
    constructor(id) {
        const { starrail: finder } = new client_1.AssetFinder();
        this.id = id;
        this.icon = finder.profilePicture(id).icon;
    }
}
/**
 * A class that structures the record's data.
 */
class SRRecordInfo {
    /**
     * The last finished floor by the player in the Memory of Chaos.
     */
    mocLastFinishedFloor;
    /**
     * The last finished floor by the player in the Forgotten Hall.
     */
    fhLastFinishedFloor;
    /**
     * The ID of the current Memory of Chaos.
     */
    mocId;
    /**
     * The number of lightcones obtained by the player.
     */
    lightConesObtained;
    /**
     * The last finished world by the player in the Simulated Universe.
     */
    simulatedUniverseLastFinishedWorld;
    /**
     * The number of achievements completed by the player.
     */
    achievementCount;
    /**
     * The number of characters obtained by the player.
     */
    charactersObtained;
    /**
     * The number of books obtained by the player.
     */
    booksCollected;
    /**
     * The number of relics owned by the player.
     */
    relicsOwned;
    /**
     * The number of music tracks collected by the player.
     */
    musicCollected;
    /**
     * The last finished stage in the current rotating endgame content..
     */
    currentRotatingEndgameContentLastFinishedStage;
    /**
     * The score obtained in the current rotating endgame content.
     */
    currentRotatingEndgameContentScore;
    /**
     * Creates a new `SRRecodInfo` instance.
     * @param data - The data of the records.
     */
    constructor(data) {
        this.mocLastFinishedFloor = data.challengeInfo.noneScheduleMaxLevel || 0;
        this.fhLastFinishedFloor = new SRFHInfo(data.challengeInfo.scheduleMaxLevel);
        this.mocId = data.challengeInfo.scheduleGroupId || 0;
        this.lightConesObtained = data.equipmentCount || 0;
        this.simulatedUniverseLastFinishedWorld = data.maxRogueChallengeScore || 0;
        this.achievementCount = data.achievementCount || 0;
        this.charactersObtained = data.avatarCount;
        this.booksCollected = data.bookCount || 0;
        this.relicsOwned = data.relicCount || 0;
        this.musicCollected = data.musicCount || 0;
        this.currentRotatingEndgameContentLastFinishedStage = data.challengeInfo.abyssLevel || 0;
        this.currentRotatingEndgameContentScore = data.challengeInfo.abyssStarCount || 0;
    }
}
class SRFHInfo {
    /**
     * The last finished floor of the FH from Jarilo VI.
     */
    jarilo;
    /**
     * The last finished floor of the FH from The Xianzhou Luofu.
     */
    xianzhou;
    constructor(fhLastFinishedFloor) {
        this.jarilo = fhLastFinishedFloor > 15 ? 15 : (fhLastFinishedFloor || 0);
        this.xianzhou = fhLastFinishedFloor > 15 ? fhLastFinishedFloor - 15 : 0;
    }
}
