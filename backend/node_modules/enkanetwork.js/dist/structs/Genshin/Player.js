"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Player = void 0;
const utils_1 = require("../../utils");
const client_1 = require("../../client");
const theaterDifficulty = utils_1.theaterDifficulty;
const theaterModeMap = [
    "Easy",
    "Normal",
    "Hard",
    "Visionary"
];
const elementEnumMap = [
    "No Element",
    "Pyro",
    "Hydro",
    "Dendro",
    "Electro",
    "Cryo",
    "",
    "Anemo",
    "Geo"
];
/**
 * A class that structures the data of the player.
 */
class Player {
    /**
     * The player's username.
     */
    username;
    /**
     * The player's level types data.
     */
    levels;
    /**
     * The player's signature.
     */
    signature;
    /**
     * The player's namecard.
     */
    namecard;
    /**
     * The player's finished achievements count.
     */
    achievements;
    /**
     * The player's abyss data.
     */
    abyss;
    /**
     * The player's showcase characters data.
     */
    showcase;
    /**
     * A list of the player's namecards data.
     */
    namecardsList;
    /**
     * The player's profile picture data.
     */
    profilePicture;
    /**
     * The theater act.
     */
    theaterAct;
    /**
     * The current theater mode index.
     */
    theaterModeIndex;
    /**
     * The current theater mode in a parsed string (Easy, Normal, Hard or Visionary).
     */
    theaterMode;
    /**
     * The count of the total current theater stars.
     */
    theaterStars;
    /**
     * Whether the player has public constellations in the showcase or not.
     */
    publicConstellations;
    /**
     * The count of characters with max friendship level.
     */
    maxFriendshipCount;
    /**
     * Creates a new `Player` instance.
     * @param data - The data of the player.
     * @param language - The language to get the names.
     */
    constructor(data, language) {
        const { genshin: genshinFinder } = new client_1.AssetFinder({ language });
        this.username = data.nickname || "";
        this.levels = data.level
            ? new PlayerLevels(data)
            : {};
        this.signature = data.signature || "";
        this.namecard = data.nameCardId
            ? new Namecard(data.nameCardId, genshinFinder)
            : {};
        this.achievements = data.finishAchievementNum || 0;
        this.abyss =
            data.towerFloorIndex && data.towerLevelIndex
                ? new Abyss(data)
                : {};
        this.showcase = data.showAvatarInfoList
            ? data.showAvatarInfoList.map((data) => new Showcase(data, genshinFinder))
            : [];
        this.namecardsList = data.showNameCardIdList
            ? data.showNameCardIdList.map((data) => new Namecard(data, genshinFinder))
            : [];
        this.profilePicture = data.profilePicture
            ? new ProfilePicture(data.profilePicture, genshinFinder)
            : {};
        this.theaterAct = data.theaterActIndex || "";
        this.theaterModeIndex = data.theaterModeIndex || "";
        this.theaterMode = theaterModeMap[theaterDifficulty[`${data.theaterModeIndex}`]?.difficultyLevel - 1] || "";
        this.theaterStars = data.theaterStarIndex || 0;
        this.publicConstellations = data.isShowAvatarTalent || false;
        this.maxFriendshipCount = data.fetterCount || 0;
    }
}
exports.Player = Player;
/**
 * A class that structures the player's different level types.
 */
class PlayerLevels {
    /**
     * The player's world level.
     */
    world;
    /**
     * The player's adventure rank.
     */
    rank;
    /**
     * Creates a new `PlayerLevels` instance.
     * @param data - The data of the player.
     */
    constructor(data) {
        this.world = data.worldLevel || "";
        this.rank = data.level || "";
    }
}
/**
 * A class that structures the player's namecards data.
 */
class Namecard {
    /**
     * The id of the namecard.
     */
    id;
    /**
     * The assets of the namecard.
     */
    assets;
    /**
     * The name of the namecard.
     */
    name;
    /**
     * Creates a new `Namecard` instance.
     * @param namecardId - The ID of the namecard.
     * @param language - The language to get the name.
     */
    constructor(namecardId, genshinFinder) {
        const namecard = genshinFinder.namecard(namecardId || "0");
        this.id = namecardId || "";
        this.assets = namecard.assets;
        this.name = namecard.name;
    }
}
/**
 * A class that structures the player's abyss data.
 */
class Abyss {
    /**
     * The current floor of the player's abyss.
     */
    floor;
    /**
     * The current chamber of the player's abyss.
     */
    chamber;
    /**
     * The count of total stars in the current abyss.
     */
    stars;
    /**
     * Creates a new `Abyss` instance.
     * @param data - The data of the player.
     */
    constructor(data) {
        this.floor = data.towerFloorIndex || "";
        this.chamber = data.towerLevelIndex || "";
        this.stars = data.towerStarIndex || 0;
    }
}
/**
 * A class that structures the player's showcase characters data.
 */
class Showcase {
    /**
     * The ID of the character.
     */
    characterId;
    /**
     * The level of the character.
     */
    level;
    /**
     * The ID of the character's costume.
     */
    costumeId;
    /**
     * The index for the element of the character.
     * 0 = elementless
     * 1 = pyro
     * 2 = hydro
     * 3 = dendro
     * 4 = electro
     * 5 = cryo
     * 7 = anemo
     * 8 = geo
     */
    elementIndex;
    /**
     * Parsed string with the element of the character.
     */
    element;
    /**
     * The count of the total constellations of the character.
     */
    constellations;
    /**
     * The assets of the character.
     */
    assets;
    /**
     * The name of the character.
     */
    name;
    /**
     * Creates a new `Showcase` instance.
     * @param data - The data of the player's showcase.
     * @param language - The language to get the names.
     */
    constructor(data, genshinFinder) {
        const character = genshinFinder.character(data.avatarId || "0");
        this.characterId = data.avatarId || "";
        this.level = data.level || "";
        this.costumeId = data.costumeId || "";
        this.assets = character.assets;
        this.name = character.name;
        this.elementIndex = data.energyType || "";
        this.element = elementEnumMap[data.energyType] || "";
        this.constellations = data.talentLevel || 0;
    }
}
/**
 * A class that structures the player's profile picture data.
 */
class ProfilePicture {
    /**
     * The ID of the character.
     */
    characterId;
    /**
     * The ID of the profile picture.
     */
    id;
    /**
     * The assets of the character.
     */
    assets;
    /**
     * The name of the character.
     */
    name;
    /**
     * Creates a new `ProfilePicture` instance.
     * @param data - The data of the profile picture.
     * @param language - The language to get the name.
     */
    constructor(data, genshinFinder) {
        const profilePicture = data.avatarId ?
            genshinFinder.character(data.avatarId)
            : data.id
                ? genshinFinder.profilePicture(data.id)
                : genshinFinder.profilePicture("0");
        this.characterId = data.avatarId || "";
        this.id = data.id || "";
        this.assets = profilePicture.assets;
        this.name = profilePicture.name;
    }
}
