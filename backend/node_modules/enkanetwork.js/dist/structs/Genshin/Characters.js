"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Characters = void 0;
const client_1 = require("../../client");
const Equipment_1 = require("./Equipment");
const Stats_1 = require("./Stats");
const Properties_1 = require("./Properties");
const Skills_1 = require("./Skills");
const maxLevelMapping = [
    20,
    40,
    50,
    60,
    70,
    80,
    90
];
/**
 * A class that structures the character's data.
 */
class Characters {
    /**
     * The character's ID.
     */
    characterId;
    /**
     * The element of the character.
     */
    element;
    /**
     * The character's rank stars.
     */
    stars;
    /**
     * The maximum level by the current ascension.
     */
    maxLevel;
    /**
     * The character's properties.
     */
    properties;
    /**
     * The character's stats.
     */
    stats;
    /**
     * The list of the character's contellations data.
     */
    constellationsList;
    /**
     * The character's skill set ID.
     */
    skillDepotId;
    /**
     * A list of unlocked skill IDs.
     */
    inherentProudSkillList;
    /**
     * The character's talents data.
     */
    skills;
    /**
     * The character's talents with extra levels.
     */
    skillsExtraLevel;
    /**
     * The character's weapon and artifacts.
     */
    equipment;
    /**
     * The character's friendship data.
     */
    friendship;
    /**
     * The character's assets.
     */
    assets;
    /**
     * The character's costume ID.
     */
    costumeId;
    /**
     * The character's name.
     */
    name;
    /**
     * Creates a new `Characters` instance.
     * @param data - The data of the character.
     * @param language - The language to get the name.
     */
    constructor(data, language) {
        const { genshin: genshinFinder } = new client_1.AssetFinder({ language });
        let charDepot = "";
        if (["10000005", "10000007"].includes(data.avatarId.toString()))
            charDepot = `${data.avatarId}-${data.skillDepotId}`;
        const character = genshinFinder.character(charDepot || data.avatarId);
        this.characterId = data.avatarId;
        this.element = character.element;
        this.stars = character.stars;
        this.maxLevel = maxLevelMapping[+data.propMap[1002].val || 0];
        this.properties = new Properties_1.Properties(data.propMap);
        this.stats = new Stats_1.Stats(data.fightPropMap);
        this.constellationsList = data.talentIdList
            ? data.talentIdList.map((data) => new Constellations(data, genshinFinder))
            : [];
        this.skillDepotId = data.skillDepotId;
        this.inherentProudSkillList = data.inherentProudSkillList || [];
        this.skills = new Skills_1.Skills(data.skillLevelMap, data.avatarId, data.skillDepotId, language);
        this.skillsExtraLevel = data.proudSkillExtraLevelMap || {};
        this.equipment = new Equipment_1.Equipment(data.equipList, language);
        this.friendship = new Friendship(data.fetterInfo);
        this.assets = character.assets;
        this.costumeId = data.costumeId || "";
        this.name = character.name;
    }
}
exports.Characters = Characters;
/**
 * A class that structures the constellations data.
 */
class Constellations {
    /**
     * The constellation's ID.
     */
    id;
    /**
     * The constellation's name.
     */
    name;
    /**
     * The constellation's assets.
     */
    assets;
    /**
     * Creates a new `Constellations` instance.
     * @param constellationId - The ID of the constellation.
     * @param language - The language to get the name.
     */
    constructor(constellationId, genshinFinder) {
        const constellation = genshinFinder.constellation(constellationId);
        this.id = constellationId;
        this.assets = constellation.assets;
        this.name = constellation.name;
    }
}
/**
 * A class that structures the data of the character's friendship.
 */
class Friendship {
    /**
     * The character's friendship level.
     */
    level;
    /**
     * Creates a new `FriendshipInfo` instance.
     * @param data - The character's friendship data.
     */
    constructor(data) {
        this.level = data.expLevel;
    }
}
