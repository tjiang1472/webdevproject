"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CharacterImages = exports.CharacterAssets = void 0;
const utils_1 = require("../../../utils");
const characters = utils_1.characters;
const hashes = utils_1.hashes;
/**
 * A class that structures the character assets and name.
 */
class CharacterAssets {
    /**
     * The name of the character.
     */
    name;
    /**
     * The element of the character.
     */
    element;
    /**
     * The character's rank stars.
     */
    stars;
    /**
     * The assets of the character.
     */
    assets;
    /**
     * Creates a new `CharacterAssets` instance.
     * @param characterId - The ID of the character.
     * @param language - The language to get the name.
     */
    constructor(characterId, language) {
        const character = characters[characterId];
        this.name =
            hashes[language]?.[character?.nameTextMapHash] || "";
        this.element = character?.element || "";
        this.stars = character?.rarity || 0;
        this.assets = character
            ? new CharacterImages(character)
            : {};
    }
}
exports.CharacterAssets = CharacterAssets;
/**
 * A class that structures the character image types.
 */
class CharacterImages {
    /**
     * The character's icon.
     */
    icon;
    /**
     * The character's side icon.
     */
    sideIcon;
    /**
     * The character's gacha icon.
     */
    gachaIcon;
    /**
     * The character's constellation icons.
     */
    constellations;
    /**
     * The character's talent icons.
     */
    talents;
    /**
     * The character's costumes.
     */
    costumes;
    /**
     * Creates a new `CharacterImages` instance.
     * @param data - The data of the character.
     */
    constructor(data) {
        this.icon = data ? data.icon : "";
        this.sideIcon = data ? data.sideIcon : "";
        this.gachaIcon = data ? data.gachaIcon : "";
        this.constellations = data ? data.constellations : [];
        this.talents = new CharacterSkillIcons(data.skills);
        this.costumes =
            data && data.costumes
                ? data.costumes.map((data) => new CharacterCostumes(data))
                : [];
    }
}
exports.CharacterImages = CharacterImages;
/**
 * A class that structures the character costumes.
 */
class CharacterCostumes {
    /**
     * The costume's side icon name.
     */
    sideIconName;
    /**
     * The costume's icon.
     */
    icon;
    /**
     * The costume's art.
     */
    art;
    /**
     * Creates a new `CharacterCostumes` instance.
     * @param data - The data of the character images.
     */
    constructor(data) {
        this.sideIconName = data ? data.sideIconName : "";
        this.icon = data ? data.icon : "";
        this.art = data ? data.art : "";
    }
}
/**
 * A class that structures the character skill icons.
 */
class CharacterSkillIcons {
    /**
     * The normal attack icon.
     */
    normalAttack;
    /**
     * The elemental skill icon.
     */
    elementalSkill;
    /**
     * The elemental burst icon.
     */
    elementalBurst;
    /**
     * Creates a new `CharacterSkillIcons` instance.
     * @param data - The data of the character images.
     */
    constructor(data) {
        this.normalAttack = data ? data.normalAttack : "";
        this.elementalBurst = data ? data.elementalBurst : "";
        this.elementalSkill = data ? data.elementalSkill : "";
    }
}
