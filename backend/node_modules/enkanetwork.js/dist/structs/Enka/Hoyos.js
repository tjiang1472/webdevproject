"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hoyos = void 0;
const handlers_1 = require("../../handlers");
const HoyoBuilds_1 = require("./HoyoBuilds");
const Genshin_1 = require("../Genshin");
const StarRail_1 = require("../StarRail");
/**
 * A class that structures the data of the profile hoyos.
 */
class Hoyos {
    language;
    username;
    /**
     * If the UID of the user's profile is public.
     */
    isUidPublic;
    /**
     * If the hoyo is public.
     */
    public;
    /**
     * If the hoyo is verified.
     */
    verified;
    /**
     * The UID of the hoyo.
     */
    uid;
    /**
     * The hoyo's player data.
     */
    player;
    /**
     * The hash of the hoyo.
     */
    hash;
    /**
     * The region of the hoyo.
     */
    region;
    /**
     * The display order of the hoyo.
     */
    order;
    /**
     * The order of character IDs for display.
     */
    avatar_order;
    /**
     * The type of the hoyo (Genshin or StarRail)
     */
    type;
    /**
     * Creates a new `Hoyos` instance.
     * @param data - The data of the hoyos.
     * @param language - The language to get the name.
     * @param username - The username of the profile.
     */
    constructor(data, language, username) {
        this.language = language;
        this.username = username;
        this.isUidPublic = data.uid_public;
        this.public = data.public;
        this.verified = data.verified;
        this.uid = data.uid || "";
        this.player =
            data.player_info && data.hoyo_type == 0
                ? new Genshin_1.Player(data.player_info, language)
                : data.player_info && data.hoyo_type == 1
                    ? new StarRail_1.SRPlayer(data.player_info)
                    : {};
        this.hash = data.hash;
        this.region = data.region;
        this.order = data.order;
        this.avatar_order = data.avatar_order || [];
        this.type = data.hoyo_type;
    }
    async getHoyoBuilds() {
        const handler = new handlers_1.RequestHandler();
        const builds = [];
        const data = await handler.profile(`${this.username}/hoyos/${this.hash}/builds`);
        if (Object.keys(data).length == 0)
            return [];
        Object.keys(data).forEach((characterId) => {
            builds.push(...data[characterId]);
        });
        return builds.map((data) => new HoyoBuilds_1.HoyoBuilds(data, this.language));
    }
}
exports.Hoyos = Hoyos;
