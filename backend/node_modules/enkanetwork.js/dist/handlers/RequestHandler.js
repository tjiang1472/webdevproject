"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestHandler = void 0;
const errors_1 = require("../errors");
//@ts-ignore
const package_json_1 = require("../../package.json");
const axios_1 = __importDefault(require("axios"));
/**
 * A class that handles the requests to the APIs.
 */
class RequestHandler {
    /**
     * The options of the Wrapper.
     */
    options;
    /**
     * Creates a new `RequestHandler` instance.
     * @param options - The options of the Wrapper class.
     * @param options.userAgent - The User Agent used in the request. If not specified, the default User Agent will be used.
     */
    constructor(options) {
        this.options = options;
    }
    /**
     * Sends a request to get the data of a player.
     * @param uid - The UID used to get the data of the player.
     * @returns The data of the player.
     */
    async player(uid, type) {
        const url = type == "genshin"
            ? `https://enka.network/api/uid/${uid}`
            : `https://enka.network/api/hsr/uid/${uid}`;
        if (!/^(18|[1-35-9])\d{8}$/.test(uid.toString()))
            throw new errors_1.PackageError("The UID format is incorrect");
        try {
            const { data } = await axios_1.default.get(url, {
                headers: {
                    "accept-encoding": "*",
                    "User-Agent": `${this.options?.userAgent || `enkanetwork.js/v${package_json_1.version}`}`,
                },
            });
            return data;
        }
        catch (err) {
            throw new errors_1.APIError(err.response.status, url);
        }
    }
    /**
     * Sends a request to get the data of an Enka profile.
     * @param route - The route to send the request.
     * @returns The data of the requested route.
     */
    async profile(route) {
        const url = `https://enka.network/api/profile/${route}/`;
        try {
            const { data } = await axios_1.default.get(url, {
                headers: {
                    "accept-encoding": "*",
                    "User-Agent": `${this.options?.userAgent || `enkanetwork.js/v${package_json_1.version}`}`,
                },
            });
            return data;
        }
        catch (err) {
            throw new errors_1.APIError(err.response.status, url);
        }
    }
    /**
     * Sends a request to get the last version of the excels and the zip.
     * @returns The last version and the zip.
     */
    async updateInfo() {
        const lOptions = { headers: { "accept-encoding": "*" } }; // Method to fix axios 1.2.1 encoding error.
        const zOptions = { responseType: "stream" };
        try {
            const [config, zip] = await axios_1.default.all([
                axios_1.default.get("https://raw.githubusercontent.com/Jelosus2/enkanetwork.js/master/info.json", lOptions),
                axios_1.default.get("https://raw.githubusercontent.com/Jelosus2/enkanetwork.js/master/content.zip", zOptions),
            ]);
            return {
                lastVersion: config.data.version,
                zip: zip.data,
            };
        }
        catch (err) {
            throw new errors_1.PackageError("Couldn't retrieve the information of the zip for update check");
        }
    }
}
exports.RequestHandler = RequestHandler;
