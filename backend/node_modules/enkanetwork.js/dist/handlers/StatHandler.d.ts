/**	BASE CODE PROVIDED BY ALGOINDE, CREATOR OF ENKA.NETWORK **/
import { SRLightCone, SRRelics, SRSkillTreeList } from "../structs";
export declare class LayerGenerator {
    constructor();
    static character(c: {
        characterId: number;
        ascension: number;
        level: number;
    }): PropLayer;
    static weapon(w: SRLightCone): PropLayer;
    static weaponAffix(w: SRLightCone): PropLayer;
    static relic(list?: SRRelics[]): PropLayer;
    static relicSet(list?: SRRelics[]): PropLayer;
    static skillTree(list?: SRSkillTreeList[]): PropLayer;
}
export declare class PropLayer {
    id: string;
    disabled: boolean;
    BaseHP: number;
    HPAddedRatio: number;
    HPDelta: number;
    HPConvert: number;
    BaseAttack: number;
    AttackAddedRatio: number;
    AttackDelta: number;
    AttackConvert: number;
    BaseDefence: number;
    DefenceAddedRatio: number;
    DefenceDelta: number;
    DefenceConvert: number;
    BaseSpeed: number;
    SpeedAddedRatio: number;
    SpeedDelta: number;
    SpeedConvert: number;
    CriticalChance: number;
    CriticalDamage: number;
    SPRatio: number;
    SPRatioConvert: number;
    StatusProbability: number;
    StatusProbabilityConvert: number;
    StatusResistance: number;
    StatusResistanceConvert: number;
    HealRatioBase: number;
    HealRatioConvert: number;
    HealTakenRatio: number;
    ShieldAddedRatio: number;
    ShieldTakenRatio: number;
    AggroBase: number;
    AggroAddedRatio: number;
    AggroDelta: number;
    BreakDamageAddedRatio: number;
    BreakDamageAddedRatioBase: number;
    AllDamageTypeResistance: number;
    PhysicalResistanceDelta: number;
    FireResistanceDelta: number;
    IceResistanceDelta: number;
    ThunderResistanceDelta: number;
    QuantumResistanceDelta: number;
    ImaginaryResistanceDelta: number;
    WindResistanceDelta: number;
    PhysicalPenetrate: number;
    FirePenetrate: number;
    IcePenetrate: number;
    ThunderPenetrate: number;
    QuantumPenetrate: number;
    ImaginaryPenetrate: number;
    WindPenetrate: number;
    AllDamageTypeTakenRatio: number;
    PhysicalTakenRatio: number;
    FireTakenRatio: number;
    IceTakenRatio: number;
    ThunderTakenRatio: number;
    QuantumTakenRatio: number;
    ImaginaryTakenRatio: number;
    WindTakenRatio: number;
    AllDamageTypeAddedRatio: number;
    DOTDamageAddedRatio: number;
    PhysicalAddedRatio: number;
    FireAddedRatio: number;
    IceAddedRatio: number;
    ThunderAddedRatio: number;
    QuantumAddedRatio: number;
    ImaginaryAddedRatio: number;
    WindAddedRatio: number;
    StanceBreakAddedRatio: number;
    AllDamageReduce: number;
    FatigueRatio: number;
    MinimumFatigueRatio: number;
    constructor(id?: string);
    static toProp(type: string, value: number, base: number): {
        type: string;
        value: number;
        base: number;
    };
    get props(): {
        type: string;
        value: number;
        base: number;
    }[];
    get HP(): number;
    get Attack(): number;
    get Defence(): number;
    get Speed(): number;
    get BreakDamage(): number;
    get Aggro(): number;
    get SPRatioBase(): number;
    set SPRatioBase(v: number);
    get StatusProbabilityBase(): number;
    set StatusProbabilityBase(v: number);
    get CriticalChanceBase(): number;
    set CriticalChanceBase(v: number);
    get CriticalDamageBase(): number;
    set CriticalDamageBase(v: number);
    get StatusResistanceBase(): number;
    set StatusResistanceBase(v: number);
}
export declare class PropState {
    layers: Map<string, PropLayer>;
    constructor();
    sum(...layerNames: string[]): PropLayer;
    add(layer: PropLayer): void;
    clear(): void;
}
export declare function ifProp(pr: any, type: string): number | string;
